@inject IWebAssemblyHostEnvironment Environment
@page "/cars/index"
@page "/cars/index/{MakeId:int}/{MakeName}"
@inherits CarBase
<h1>Vehicle Inventory</h1>
@if (!MakeName.Equals("All", StringComparison.OrdinalIgnoreCase))
{
    <h3>@MakeName</h3>
    <PageTitle>@MakeName Inventory</PageTitle>
}
else
{
    <PageTitle>Vehicle Inventory</PageTitle>
}
<CreateHelper RouteStart="cars"></CreateHelper>
<p/>
@if (!_cars.Any())
{
    if (string.IsNullOrEmpty(_errorMessage))
    {
        <div>
            <em>Loading...</em>
        </div>
    }
    else
    {
        <div class="text-warning">@_errorMessage</div>
    }
}
else
{
    <CarList Cars="_cars"/>
}

@code {

    [Parameter]
    public int? MakeId { get; set; }

    [Parameter]
    public string MakeName { get; set; }

    private string _errorMessage = string.Empty;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        MakeName ??= "All";
        try
        {
            _cars = MakeId is > 0
                ? await CarDataServiceInstance.GetByMakeAsync(MakeId.Value)
                : await CarDataServiceInstance.GetAllEntitiesAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = Environment.IsDevelopment() 
                ? $"{ex.Message}<br/>{ex.StackTrace}" 
                : "An error occurred loading the inventory.";
            Console.WriteLine(ex);
        }

        StateHasChanged();
    }

    private List<Car> _cars = [];
}